import React, { Component } from 'react';
import { View, StyleSheet, FlatList, Image, TouchableOpacity, Text, TextInput, StatusBar, KeyboardAvoidingView, Platform, Keyboard } from 'react-native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { MaterialIcons, SimpleLineIcons } from '@expo/vector-icons';
import Profile from './Profile';
import Settings from './Settings';
import { ImageBackground } from 'react-native';

const Tab = createBottomTabNavigator();

const images = [
    { key: '1', image: require('./assets/education.jpg'), name: 'Education' },
    { key: '2', image: require('./assets/sport4.jpg'), name: 'Sports' },
    { key: '3', image: require('./assets/health1.jpg'), name: 'Health' },
    { key: '4', image: require('./assets/asd.jpg'), name: 'Muscles' },
    { key: '5', image: require('./assets/cooking3.jpg'), name: 'Cooking' },
    { key: '6', image: require('./assets/tech.jpg'), name: 'Technology' },
    { key: '7', image: require('./assets/math.webp'), name: 'Artificial Intelligence' }
];

export default class Home extends Component {
    constructor(props) {
        super(props);
        this.state = {
            searchQuery: '',
            filteredImages: [],
            keyboardVisible: false
        };
    }

    componentDidMount() {
        this.keyboardDidShowListener = Keyboard.addListener(
            'keyboardDidShow',
            this._keyboardDidShow
        );
        this.keyboardDidHideListener = Keyboard.addListener(
            'keyboardDidHide',
            this._keyboardDidHide
        );
    }

    componentWillUnmount() {
        this.keyboardDidShowListener.remove();
        this.keyboardDidHideListener.remove();
    }

    _keyboardDidShow = () => {
        this.setState({ keyboardVisible: true });
    }

    _keyboardDidHide = () => {
        this.setState({ keyboardVisible: false });
    }

    handleSearch = () => {
        const { searchQuery } = this.state;
        const filteredData = images.filter(item => item.name.toLowerCase().includes(searchQuery.toLowerCase()));
        this.setState({ filteredImages: filteredData });
    };

    handleImagePress = (item) => {
        console.log('Image pressed:', item.key);
        if (item.key === '4') {
            this.props.navigation.navigate('Jym');
        } else {
            console.log('empty');
        }
    };

    clearSearchQuery = () => {
        this.setState({ searchQuery: '', filteredImages: [] });
    };

    render() {
        const { searchQuery, filteredImages, keyboardVisible } = this.state;
        return (
            <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : null} keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : -200}>
                <StatusBar backgroundColor="#00FFFF" barStyle="dark-content" />
                <View style={{ flex: 1, backgroundColor: 'black' }}>
                    <Tab.Navigator
                        screenOptions={{
                            tabBarStyle: [{ backgroundColor: 'black', display: keyboardVisible ? 'none' : 'flex' }, null],
                            tabBarShowLabel: false
                        }}
                    >
                        <Tab.Screen
                            name="Home"
                            component={HomeScreen}
                            initialParams={{
                                filteredImages,
                                handleImagePress: this.handleImagePress,
                                searchQuery,
                                handleSearch: this.handleSearch,
                                clearSearchQuery: this.clearSearchQuery
                            }}
                            options={{
                                headerShown: false,
                                tabBarIcon: ({ color, size, focused }) => (
                                    <MaterialIcons
                                        name="home"
                                        size={30}
                                        color={focused ? '#00FFFF' : 'white'} // Change color based on focus
                                    />
                                ),
                            }}
                        />
                        <Tab.Screen
                            name="Profile"
                            component={Profile}
                            options={{
                                headerShown: true,
                                headerTitleAlign: 'center', // Align header title to center
                                headerTitleStyle: { fontSize: 25 }, // Set font size of header title
                                headerStyle: {
                                    backgroundColor: 'black', // Set header background color to black
                                },
                                headerTintColor: 'white', // Set header text color to white
                                tabBarIcon: ({ color, size, focused }) => (
                                    <MaterialIcons
                                        name="account-circle"
                                        size={30}
                                        color={focused ? '#00FFFF' : 'white'} // Change color based on focus
                                    />
                                ),
                            }}
                        />
                        <Tab.Screen
                            name="Settings"
                            component={Settings}
                            options={{
                                headerShown: true,
                                headerTitle: "Settings", // Specify the header title
                                headerStyle: {
                                    backgroundColor: 'black', // Set header background color to black
                                },
                                headerTintColor: 'white', // Set header text color to white
                                tabBarIcon: ({ color, size, focused }) => (
                                    <SimpleLineIcons
                                        name="settings"
                                        size={size}
                                        color={focused ? '#00FFFF' : 'white'} // Change color based on focus
                                    />
                                ),
                            }}
                        />
                    </Tab.Navigator>
                </View>
            </KeyboardAvoidingView>
        );
    }
}

class HomeScreen extends Component {
    renderImages = () => {
        const { searchQuery, filteredImages } = this.props.route.params;
        if (searchQuery === '') {
            return images; // Show original list when search query is empty
        } else {
            return filteredImages;
        }
    };

    render() {
        const { searchQuery } = this.props.route.params;
        return (
            <View style={{ flex: 1, backgroundColor: 'black' }}>
                <Text style={{ color: 'white', paddingLeft: 20, paddingTop: 20, fontSize: 30, fontWeight: 'bold' }}>Skills</Text>
                <View style={{ height: 80, backgroundColor: 'black', flexDirection: 'row', alignItems: 'center', paddingHorizontal: 10, paddingTop: 2 }}>
                    <TextInput
                        style={styles.searchInput}
                        placeholder="Search..."
                        placeholderTextColor="white"
                        onChangeText={(text) => {
                            this.props.route.params.handleSearch();
                        }}
                        value={searchQuery}
                    />
                    {/* Cross button */}
                    {searchQuery !== '' && (
                        <TouchableOpacity style={styles.clearButton} onPress={() => this.props.route.params.clearSearchQuery()}>
                            <MaterialIcons name="clear" size={24} color="white" />
                        </TouchableOpacity>
                    )}
                    <TouchableOpacity style={styles.searchButton} onPress={() => this.props.route.params.handleSearch()}>
                        <MaterialIcons name="search" size={24} color="white" />
                    </TouchableOpacity>
                </View>
                <FlatList
                    data={this.renderImages()} // Render based on search query
                    renderItem={({ item }) => (
                        <TouchableOpacity onPress={() => this.props.route.params.handleImagePress(item)}>
                            <View style={{ flex: 0 }}>
                                <ImageBackground style={styles.image} source={item.image}>
                                    <Text style={{ color: 'white', fontSize
: 28, paddingTop: 10, paddingLeft: 8, fontWeight: 'bold' }}>{item.name}</Text>
</ImageBackground>
</View>
</TouchableOpacity>
)}
contentContainerStyle={styles.flatListContent}
keyExtractor={(item, index) => index.toString()}
/>
</View>
);
}
}

const styles = StyleSheet.create({
container: {
flex: 1,
backgroundColor: 'black',
paddingTop: 4
},
flatListContent: {
flexGrow: 1,
justifyContent: 'center',
alignItems: 'center',
},
image: {
height: 160,
width: 346,
marginBottom: 10,
borderWidth: 1,
borderColor: '#00FFFF',
borderRadius: 10, // Adjust border radius
overflow: 'hidden', // Clip overflow content
},
searchInput: {
flex: 1,
height: 40,
backgroundColor: 'rgba(255, 255, 255, 0.2)',
color: 'white',
paddingHorizontal: 10,
borderRadius: 20,
marginRight: 10,
},
searchButton: {
width: 40,
height: 40,
borderRadius: 20,
backgroundColor: 'rgba(255, 255, 255, 0.2)',
alignItems: 'center',
justifyContent: 'center',
},
clearButton: {
width: 40,
height: 40,
borderRadius: 20,
backgroundColor: 'rgba(255, 255, 255, 0.2)',
alignItems: 'center',
justifyContent: 'center',
marginRight: 10,
},
});
